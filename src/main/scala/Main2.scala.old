import shapeless._

/**
  * Created by johnreed on 5/17/16.
  */
object Main2 {

  /*
  sealed trait Color

  case class Black() extends Color

  case class Red() extends Color

  case class White() extends Color

  case class Pixel(color: Color = Black(), brightness: Int = 0)

  case class PixelGrid[MyLength <: Nat](columns: Sized[Seq[Pixel], MyLength]*) {

    def verticalAppend[OtherLength <: Nat, CombinedLength <: Nat](other: PixelGrid[OtherLength])
    : PixelGrid[CombinedLength] = {
      val otherColumns: Seq[Sized[Seq[Pixel], OtherLength]] = other.columns
      require(columns.length == otherColumns.length, "You can only vertical append grids of equal width")
      var accumulator = Seq[Sized[Seq[Pixel], CombinedLength]]()
      for(i <- 0 to columns.length) {
        val appended: Seq[Pixel] = columns(i).unsized ++ otherColumns(i).unsized
        val sizedColumn = Sized.apply
        accumulator :+ sizedColumn
      }
      val toReturn: PixelGrid[CombinedLength] = PixelGrid(accumulator:_*)
      toReturn
    }
  }
*/
  //def main(args: Array[String]) {
    /*
    val grid1 = PixelGrid(
      Sized( Pixel(),  Pixel(),  Pixel(),  Pixel()),
      Sized( Pixel(),  Pixel(),  Pixel(),  Pixel()),
      Sized( Pixel(),  Pixel(),  Pixel(),  Pixel())
    )
    val grid2 = PixelGrid(
      Sized( Pixel(),  Pixel(),  Pixel(),  Pixel()),
      Sized( Pixel(),  Pixel(),  Pixel(),  Pixel())
    )
    val grid3 = grid1.verticalAppend(grid2)
    println(grid3.columns.length + " " + grid3.columns(0).length) // 4 5

  }
}
*/
/*
package <empty> {
  object Main extends scala.AnyRef {
    def <init>(): Main.type = {
      Main.super.<init>();
      ()
    };
    implicit class IntWrapper extends scala.AnyRef {
      <paramaccessor> private[this] val i: Int = _;
      def <init>(i: Int): Main.IntWrapper = {
        IntWrapper.super.<init>();
        ()
      };
      def printHello(): Unit = scala.this.Predef.println("Hello")
    };
    implicit <synthetic> def IntWrapper(i: Int): Main.IntWrapper = new IntWrapper(i);
    def takeInWrapper(wrapper: Main.IntWrapper): Unit = wrapper.printHello();
    def main(args: Array[String]): Unit = Main.this.takeInWrapper(Main.this.IntWrapper(5))
  }
}


 */
}
